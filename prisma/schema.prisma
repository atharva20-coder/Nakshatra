generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id            String        @id @default(uuid())
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String        @unique
  emailVerified Boolean
  image         String?
  role          UserRole      @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  accounts      Account[]
  agencyVisits  AgencyVisit[]
  posts         Post[]
  sessions      Session[]

  @@map("users")
}

model AgencyVisit {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    SubmissionStatus @default(DRAFT)
  agencyId  String
  agency    User             @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  details   VisitDetail[]

  @@map("agency_visits")
}

model VisitDetail {
  id             String      @id @default(uuid())
  srNo           String
  dateOfVisit    String
  employeeId     String
  employeeName   String
  mobileNo       String
  branchLocation String
  product        String
  bucketDpd      String
  timeIn         String
  timeOut        String
  signature      String
  purposeOfVisit String
  visitId        String
  visit          AgencyVisit @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("visit_details")
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime
  updatedAt      DateTime
  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

enum UserRole {
  USER
  ADMIN
  AUDITOR
  COLLECTION_MANAGER
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
}
